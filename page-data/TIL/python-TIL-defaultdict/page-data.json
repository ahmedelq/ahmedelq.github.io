{"componentChunkName":"component---src-templates-post-js","path":"/TIL/python-TIL-defaultdict/","result":{"data":{"mdx":{"id":"38e25867-9f23-5297-b908-113cccb2f3e0","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"defaultdict (TIL)\",\n  \"author\": \"Ahmed Alq\",\n  \"tags\": [\"python\"],\n  \"comments\": true,\n  \"date\": \"2020-06-02T00:00:00.000Z\",\n  \"sub\": \"TIL\",\n  \"lang\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"One of the things that are very helpful that I just learned: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.python.org/3.9/library/collections.html#collections.defaultdict\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"defaultdict\"))), mdx(\"p\", null, \"Basically you it takes a base factory or formally \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default_factory\"), \", and invokes it for every key assignment even for missing keys.\"), mdx(\"p\", null, \"Previously I was doing something \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"like this\"), \" (for nested dictionaries):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \">>> names = [ ('Qatif', 'Reda'), ('Dammam', 'Mustafa'), ('Khobar', 'Eman'), ('Qatif', 'Abdullah'), ('Khobar', 'Ali')]\\n>>> normal_dict = {}\\n>>> for region,name in names:\\n        x_names = normal_dict.get(region, [])\\n        x_names.append(name)\\n        normal_dict[region] = x_names\\n >>> normal_dict\\n{'Qatif': ['Reda', 'Abdullah'],\\n 'Dammam': ['Mustafa'],\\n 'Khobar': ['Eman', 'Ali']}\\n\")), mdx(\"p\", null, \"Oneliner with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"list\"), \" as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default_factory\"), \" \\uD83D\\uDE09:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \">>> from collections import defaultdict\\n>>> names = [ ('Qatif', 'Reda'), ('Dammam', 'Mustafa'), ('Khobar', 'Eman'), ('Qatif', 'Abdullah'), ('Khobar', 'Ali')]\\n>>> default_dict = defaultdict(list)\\n>>> for region,name in names: default_dict[region].append(name)\\n>>> default_dict\\ndefaultdict(list,\\n            {'Qatif': ['Reda', 'Abdullah'],\\n             'Dammam': ['Mustafa'],\\n             'Khobar': ['Eman', 'Ali']})\\n\")), mdx(\"p\", null, \"Let's try with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \">>> grades = [ ('Ali', 9), ('Mohd', 8), ('Reda', 7), ('Ali', 7), ('Mohd', 5), ('Reda', 6)]\\n>>> counter_dict = defaultdict(int)\\n>>> for region,temp in grades: counter_dict[region] += temp\\n>>> counter_dict\\ndefaultdict(int, {'Ali': 16, 'Mohd': 13, 'Reda': 13})\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"defaultdict (TIL)","date":"June 2nd, 2020","isoDate":"2020-06-02","sub":"TIL","lang":false},"fields":{"slug":"/TIL/python-TIL-defaultdict/","readingTime":{"minutes":0.995,"text":"1 min read"}}}},"pageContext":{"id":"38e25867-9f23-5297-b908-113cccb2f3e0"}},"staticQueryHashes":["2841359383"]}