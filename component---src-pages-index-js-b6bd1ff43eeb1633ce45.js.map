{"version":3,"sources":["webpack:///./content/metadata/My-YAML-Content.yaml","webpack:///./src/pages/index.js"],"names":["module","exports","PostLink","post","sx","py","borderTop","borderColor","flex","to","fields","slug","theme","styles","a","frontmatter","title","dateTime","isoDate","date","allBlogs","useStaticQuery","allMdx","edges","useState","slice","blogSubset","setBlogSubset","loadMore","setLoadMore","length","hasMore","setHasMore","useEffect","curLen","isMore","console","log","nxtBlogs","Posts","map","edge","key","node","id","description","onClick","maxWidth","mx","my","display","color","cursor","padding","backgroundColor","border","Provider","value","style","verticalAlign","margin"],"mappings":"4EAAAA,EAAOC,QAAU,CAAC,MAAQ,CAAC,GAAK,cAAc,GAAK,kBAAkB,MAAQ,CAAC,GAAK,2GAA2G,GAAK,iEAAiE,QAAU,CAAC,CAAC,KAAO,+UAA+U,CAAC,KAAO,w5BAAw5B,CAAC,KAAO,QAAQ,CAAC,KAAO,W,+YCa9hD,IAEMC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACf,uBACA,YAAC,IAAD,CAAMC,GAAI,CAACC,GAAI,CAAC,EAAE,GAAIC,UAAW,YAAaC,YAAa,WACzD,oBAAMH,GAAI,CAACI,KAAM,WAEjB,YAAC,OAAD,CAAMC,GAAIN,EAAKO,OAAOC,KAAMP,GAAI,SAAAQ,GAAK,O,yWAAA,IAASA,EAAMC,OAAOC,KAC1DX,EAAKY,YAAYC,QAGlB,oBAAMC,SAAUd,EAAKY,YAAYG,SAAUf,EAAKY,YAAYI,SAQhD,qBAEd,IA0BMC,EA1BOC,yBAAe,aA0BNC,OAAOC,MA5BT,EA6BgBC,mBAAS,YAAIJ,EAASK,MAAM,EAhDhD,KAgDTC,EA7Ba,KA6BDC,EA7BC,OA8BYH,oBAAS,GAAlCI,EA9Ba,KA8BHC,EA9BG,OA+BUL,mBAASJ,EAASU,OAlDhC,GAkDTC,EA/Ba,KA+BJC,EA/BI,KAmCpBC,qBAAU,WACR,GAAIL,GAAYG,EAAS,CACvB,IAAMG,EAASR,EAAWI,OACpBK,EAASD,EAASd,EAASU,OACjCM,QAAQC,IAAIF,GACZ,IAAMG,EAAWH,EAASf,EAASK,MAAMS,EAAQA,EA3DrC,GA2D2D,GACvEP,EAAc,GAAD,mBAAKD,GAAL,YAAoBY,KACjCT,GAAY,MAEb,CAACD,EAAUG,IAEdE,qBAAU,WACR,IAAME,EAAST,EAAWI,OAASV,EAASU,OAC5CE,EAAWG,KACV,CAACT,IAEJ,IAAMa,EAAQb,EACXc,KAAI,SAAAC,GAAI,OAAI,YAACvC,EAAD,CAAUwC,IAAKD,EAAKE,KAAKC,GAAIzC,KAAMsC,EAAKE,UAEvD,OACA,YAAC,IAAD,KACA,YAAC,IAAD,CACIE,YAAW,eAAkB7B,MAAK,SAEnC,uBACCuB,GAEAR,GAAW,sBAAQe,QA7BA,kBAAMjB,GAAY,IA8BtCzB,GAAI,CAAC2C,SAAU,cAAeC,GAAI,OAAQC,GAAG,EAC7CC,QAAQ,eAAgBC,MAAO,OAAOC,OAAO,UAC5CC,QAAQ,EAAGC,gBAAgB,cAAeC,OAAQ,MAHvC,OAKT,YAAC,IAAYC,SAAb,CAAsBC,MAAO,CAC/BC,MAAO,CAAEC,cAAc,SAAUC,OAAO,WAGpC,YAAC,IAAD,CAAU5C,MAAO","file":"component---src-pages-index-js-b6bd1ff43eeb1633ce45.js","sourcesContent":["module.exports = {\"title\":{\"en\":\"Hello World\",\"ar\":\"مرحبًا بالعالم\"},\"about\":{\"en\":\"I’m a X, Y, and Z. I work at X as a Solutions Architect. You’ve found my personal slice of the internet.\",\"ar\":\"أعمل في س وص وج كمهدس برمجيات. لقد وجدت أفضل صفحة على الشابكة\"},\"content\":[{\"item\":\"Cupcake ipsum dolor. Sit amet marshmallow topping cheesecake muffin. Halvah croissant candy canes bonbon candy. Apple pie jelly beans topping carrot cake danish tart cake cheesecake. Muffin danish chocolate soufflé pastry icing bonbon oat cake. Powder cake jujubes oat cake. Lemon drops tootsie roll marshmallow halvah carrot cake.\"},{\"item\":\"Doggo ipsum borkdrive much ruin diet you are doing me the shock the neighborhood pupper doggorino length boy many pats, boofers heckin shooberino wrinkler. Very good spot very jealous pupper very hand that feed shibe smol, shoob. Long bois pupper doggo you are doin me a concern big ol yapper, smol boof most angery pupper I have ever seen puggorino. Mlem blep wow very biscit dat tungg tho wow very biscit, thicc ur givin me a spook. Many pats heckin you are doing me the shock corgo ur givin me a spook very hand that feed shibe shooberino, big ol pupper doge pats borkdrive. Such treat what a nice floof super chub such treat, smol thicc. Puggorino very good spot most angery pupper I have ever seen you are doing me the shock big ol pupper porgo corgo shoober, heckin good boys lotsa pats noodle horse very taste wow thicc. What a nice floof long doggo blep length boy borking doggo, much ruin diet floofs borkf.\"},{\"item\":192.33},{\"item\":111111}]}","/** @jsx jsx */\nimport {jsx, Flex, Styled, Heading} from 'theme-ui'\nimport * as React from \"react\"\nimport YAMLData from \"../../content/metadata/My-YAML-Content.yaml\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { Link } from \"gatsby\"\nimport {useState} from \"react\"\nimport Layout from '../components/layout'\nimport SEO from '../components/SEO'\nimport {useEffect} from \"react\"\nimport { TiArrowDownThick as Arw } from 'react-icons/ti';\nimport { IconContext } from \"react-icons\";\n\nconst MAX_POSTS = 5; \n\nconst PostLink = ({ post }) => (\n  <div>\n  <Flex sx={{py: [3,4], borderTop: '1px solid', borderColor: 'shdtxt'}}>\n    <span sx={{flex: '1 1 0%' }}>\n     \n    <Link to={post.fields.slug} sx={theme => ({...theme.styles.a}) }>\n    {post.frontmatter.title} \n    </Link>\n    </span>\n    <time dateTime={post.frontmatter.isoDate}>{post.frontmatter.date}</time>\n\n  </Flex>\n  </div>\n)\n\n\n\nexport default  () => {\n  \n  const data = useStaticQuery(graphql`\n  {\n    allMdx (\n      sort: {\n        fields: [frontmatter___date]\n        order: DESC\n      }\n    ) {\n      edges {\n        node {\n          id\n          fields { \n            slug\n          }\n          \n          frontmatter {\n            title\n              date(formatString: \"MMM DD, YYYY\")\n              isoDate: date(formatString: \"YYYY-MM-DD\")\n          }\n        }\n      }\n    }\n  }\n`)\n\n  const allBlogs = data.allMdx.edges;\n  const [blogSubset, setBlogSubset] = useState([...allBlogs.slice(0, MAX_POSTS)])\n  const [loadMore, setLoadMore] = useState(false)\n  const [hasMore, setHasMore] = useState(allBlogs.length > MAX_POSTS)\n\n  const handleLoadMore = () => setLoadMore(true)\n\n  useEffect(() => {\n    if (loadMore && hasMore) {\n      const curLen = blogSubset.length\n      const isMore = curLen < allBlogs.length\n      console.log(isMore)\n      const nxtBlogs = isMore ? allBlogs.slice(curLen, curLen + MAX_POSTS) : []\n      setBlogSubset([...blogSubset, ...nxtBlogs])\n      setLoadMore(false)\n    }\n  }, [loadMore, hasMore])\n\n  useEffect(() => {\n    const isMore = blogSubset.length < allBlogs.length\n    setHasMore(isMore)\n  }, [blogSubset])\n\n  const Posts = blogSubset\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} />)\n\n  return (\n  <Layout>\n  <SEO \n      description={`Ahmad's blog`} title={`Home`} />\n      {/* <Heading sx={{backgroundColor: 'tx', color: 'background', padding:3, borderRadius:2}}>Posts</Heading> */}\n     <div>\n     {Posts}\n     </div>\n     {hasMore && <button onClick={handleLoadMore} \n     sx={{maxWidth: 'max-content', mx: 'auto', my:2, \n     display:'inline-block', color: 'text',cursor:'pointer' ,\n      padding:3, backgroundColor:'transparent', border: '0' }}>\n      More\n        <IconContext.Provider value={{\n      style: { verticalAlign:'middle', margin:'0 5px'},\n        }}>\n        \n          <Arw {...{title: 'load more blogs'}} />\n      </IconContext.Provider>\n     </button>}\n  </Layout>\n  )\n}\n\n\n\n// const YAMLbuildtime = () => {\n//   const [lang, setLang] = useState('en')\n\n//   return (\n//   <div style={{ maxWidth: `960px`, margin: `1.45rem` }}>\n//     <h1>{YAMLData.title[lang]}</h1>\n//     <button onClick={() => setLang(lang === 'ar' ? 'en': 'ar')}>Change lang</button>\n//     <ul>\n//       {YAMLData.content.map((data, index) => {\n//         return <li key={`content_item_${index}`}>{data.item}</li>\n//       })}\n//     </ul>\n//   </div>\n// )\n//     }\n\n// export default YAMLbuildtime\n// export const pageQuery = graphql`\n// query {\n//   allMdx(\n//     sort: {\n//       fields: [frontmatter___date]\n//       order: DESC\n//     }\n//   ) {\n//     edges {\n//       node {\n//         id\n//         fields { \n//           slug\n//         }\n        \n//         frontmatter {\n//           title\n//             date(formatString: \"MMM DD, YYYY\")\n//             isoDate: date(formatString: \"YYYY-MM-DD\")\n//         }\n//       }\n//     }\n//   }\n// }\n// `\n"],"sourceRoot":""}